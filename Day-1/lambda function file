import json
import requests

def lambda_handler(event, context):
    try:
        # Parse the incoming request body (from API Gateway)
        body = json.loads(event.get("body", "{}"))
        city = body.get("city", "")

        if not city:
            return {
                'statusCode': 400,
                'body': json.dumps('City name is required!')
            }

        # Fetch weather data from OpenWeather API
        api_key = "enter your api key plzz"
        weather_url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric"

        response = requests.get(weather_url)
        data = response.json()

        # Check API response
        if response.status_code == 200:
            weather_data = {
                "city": data["name"],
                "temperature": data["main"]["temp"],
                "humidity": data["main"]["humidity"],
                "conditions": data["weather"][0]["description"]
            }
            return {
                'statusCode': 200,
                'body': json.dumps(weather_data)
            }
        else:
            return {
                'statusCode': 404,
                'body': json.dumps('City not found!')
            }

    except Exception as e:
        return {
            'statusCode': 500,
            'body': json.dumps(str(e))
        }

--------------------------------------------

import json
import requests

def lambda_handler(event, context):
    # Parse the JSON body from the event
    try:
        body = json.loads(event['body'])
        city = body.get("city", "")
    except:
        return {
            'statusCode': 400,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
            },
            'body': json.dumps('Invalid request body')
        }

    if not city:
        return {
            'statusCode': 400,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
            },
            'body': json.dumps('City name is required!')
        }

    # Fetch weather data from OpenWeather API (replace with your actual API key)
    api_key = "your_api_key_here"
    weather_url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric"

    try:
        response = requests.get(weather_url)
        data = response.json()

        # Check if the API returned valid data
        if response.status_code == 200:
            weather_data = {
                "city": data["name"],
                "temperature": data["main"]["temp"],
                "humidity": data["main"]["humidity"],
                "conditions": data["weather"][0]["description"]
            }
            return {
                'statusCode': 200,
                'headers': {
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Headers': 'Content-Type',
                    'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
                },
                'body': json.dumps(weather_data)
            }
        else:
            return {
                'statusCode': 404,
                'headers': {
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Headers': 'Content-Type',
                    'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
                },
                'body': json.dumps('City not found!')
            }
    except Exception as e:
        return {
            'statusCode': 500,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
            },
            'body': json.dumps(str(e))
        }

